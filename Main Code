;===============================================================
; RIT Hot Wheelz - OS26
;===========================================
;
;   Copyright Â© 2016, all rights reserved
;
;		RIT Hot Wheelz Formula SAE Electric Team
;		Rochester Institue of Technology
;   77 Lomb Memorial Dr
;		Rochester, NY 14623                             	          
;   
; Engage=THE DISPLAY
;
;-------------------------------------------------------------------------------------
;   Revision History (reflected in the VCL App Version variable that is displayed on the 1313)
;-------------------------------------------------------------------------------------
;
; 01/30/2016 - Cindy Gomez  - V1.00 Initial Revision. This revision includes:
;	- Created subroutines for each of the following modes: Drag Race Mode, Endurance Mode, Autocross Mode.
;	- Each of the modes changes the Max Current and turns on the Mode Switch Lights when that mode is active.              
;
; 02/01/2016 - Patrick Cody - V1.01. This revision includes:
;	- Added declarations
;	- Added Interlock Check to activate throttle
;															
;See GitHub Revisions for remainder of revisions
;
;										
VCL_App_Ver = 101	;Set VCL software revision (101 is Rev 1.01)
;
;---------------------------------------------------------------
; Declaration Section
;--------------------
	

	Interlock_Switch		equals 	SW_3
	
	Forward_Switch			equals  SW_7
	Reverse_Switch			equals  SW_8
	
	Drag_Mode_Switch		equals	SW_6
	Drag_Mode_Switch_UP		equals	SW_6_UP				;Used if up edge is used for input signal
	Drag_Mode_Switch_DOWN		equals	SW_6_DOWN			;Used if down edge is used for input signal
	
	Endurance_Mode_Switch		equals	SW_5
	Endurance_Mode_Switch_UP	equals	Sw_5_UP			;Used if up edge is used for input signal
	Endurance_Mode_Switch_DOWN	equals	Sw_5_DOWN		;Used if down edge is used for input signal
	
	AutoCross_Mode_Switch		equals	SW_4
	AutoCross_Mode_Switch_UP	equals	Sw_4_UP			;Used if up edge is used for input signal
	AutoCross_Mode_Switch_DOWN	equals	Sw_4_DOWN		;Used if down edge is used for input signal
	
	Drag_Lights			equals	PWM6			;Analog Out 0-10V
	Endurance_Lights		equals	DigOut6		;Driver 6 OFF/ON
	AutoCross_Lights		equals	DigOut7		;Driver 7 OFF/ON
	
	Drag_MaxCurrent_DLY		equals	DLY1
	Drag_MaxCurrent_DLY_Output	equals	DLY1_Output
	
	Buzzer_DLY			equals  DLY2		;CHeck These
	Buzzer_DLY_Output		equals	DLY2_Output
	
	Program_Flags			equals	User_Bit1
	Drag_Mode_Initialized_Flag 		 bit	Program_Flags.1
;	Not Used				 bit	Program_Flags.2
;	Not Used				 bit	Program_Flags.4
;	Not Used				 bit	Program_Flags.8
;	Not Used				 bit	Program_Flags.16
;	Not Used				 bit	Program_Flags.32
;	Not Used				 bit	Program_Flags.64
;	Not Used				 bit	Program_Flags.128
	
	
	
	
;===============================================================
; One time Initialization
;========================
;
		Program_Flags = 0
		VCL_Throttle_Enable = ON
		
		Setup_Delay(Buzzer_DLY,3000)		;Amount of time for ready to drive noise
		PD_Enable = OFF
	
		
		
	
;-------------------------------------------------------------------------
; Main :: Main Loop of the Program
;---------------------------------------------
;
MainLoop:
	
	If(Buzzer_DLY_Output<>0)             ;while the buzzer delay output does not equal 0, sound the buzzer
	{
                Put_PWM(PWM5, 32767)         ;make PWM5 have a declaration name in the declaration section and then use the name in place of this PWM5
        }Else{
		Put_PWM(PWM5,0)              ;make PWM5 have a declaration name in the declaration section and then use the name in place of this PWM5
	}
	
	if (Interlock_Switch = ON)		;The Interlock Switch is the switch on the throttle pedal. If the switch is off, do not allow throttle command
		{
			Throttle_Multiplier = 128
		}
	else
		{
			Throttle_Multiplier = 0
		}
		
	if((Reverse_Switch = ON)&(Motor_RPM > 0))|((Forward_Switch = ON)&(Motor_RPM < 0))
	{
		setup_delay(Change_Direction_Delay,3000)
	}
		
	if (Reverse_Switch = ON)
	{
			Max_Speed_SpdMx = 500
			Accel_Rate_SpdMx = 15000
	}	
	
	if (Drag_Mode_Switch_UP = ON)
		{
			Endurance_Mode_Switch_UP = OFF
			AutoCross_Mode_Switch_UP = OFF
			Call DragMode
			Drag_Mode_Switch_UP = OFF
			Setup_Delay(Drag_MaxCurrent_DLY,8000)		;Delays are in increments of 1ms so 8000 = 8secs
		}
	else if (Endurance_Mode_Switch_UP = ON)
		{
			AutoCross_Mode_Switch_UP = OFF
			Drag_Mode_Switch_UP = OFF
			Call EnduranceMode
			Endurance_Mode_Switch_UP = OFF
		}
	else if ((AutoCross_Mode_Switch_UP = ON)|((Drag_MaxCurrent_DLY_Output = 0)&(Drag_Mode_Initialized_Flag = ON)))	;If AutoCross Mode Switch UP edge is sensed OR the Drag_MaxCurrent_DLY = 0 AND Drag_Mode_Initialized_Flag = ON
		{
			Endurance_Mode_Switch_UP = OFF
			Drag_Mode_Switch_UP = OFF
			Drag_Mode_Initialized_Flag = OFF
			Call AutoCrossMode
			AutoCross_Mode_Switch_UP = OFF
		}
		
	else if ((Reverse_Switch = OFF)&(Forward_Switch = OFF))     ;if the car is in neutral, reduce speed and cut throttle
	
		{ 
			Decel_Rate_SpdMx = 9000
			Max_Speed_SpdMx = 400
			Throttle_Multiplier= 0
		}
;	else
;		{
;			;Do Nothing
;		}
			
	goto MainLoop
	
	
;-------------------------------------------------------------------------
; Subroutines
;---------------------------------------------
;

DragMode:			

	Drive_Current_Limit = 26213 		;MAX Amps = 400A which is 80% of 32767
	Put_PWM(Drag_Lights,32767)     		;drag light = ON	
	Clear_Digout(AutoCross_Lights)		;Turn off autocross light
	Clear_Digout(Endurance_Lights)		;Turn off endurance light		
	Drag_Mode_Initialized_Flag = ON 	;Turn on Drag Mode Flag
	
	return
		
EnduranceMode:
	
	Drive_Current_Limit = 6553		;MAX AMPS = 100A which is 20% of 32767
	Set_Digout(Endurance_Lights)		;endurance light = ON
	Clear_Digout(AutoCross_Lights)		;Turn off autocross light
	Put_PWM(Drag_Lights,0) 			;Turn off drag light

	return

AutoCrossMode:
			
	
	Drive_Current_Limit = 16383 		;MAX AMPS = 250A which is 50% of 32767
	Set_Digout(AutoCross_Lights) 		;Turn on autocross light	
	Put_PWM(Drag_Lights,0)			;Turn off drag light
	Clear_DigOut(Endurance_Lights)		;Turn off endurance light

	return
	
	
	
;-------------------------------------------------------------------------
; Startup CAN system
;---------------------------------------------
;
; This routine initializes and starts the CAN System. It has to be
; called in the One Time setup (before the main loop).

;-------------------------------------------------------------------------------
; MAILBOX 1
;   Purpose:        Send NMT message from controller(master) to BMS(slave)
;   Type:           NMT
;   Transmition:    Only sent once to put slave into operational mode after configuration 
;   Data Length:    2 Bytes
;-------------------------------------------------------------------------------

Setup_Mailbox(CAN1,0,0, ,C_EVENT,C_XMT,0,0)
Setup_Mailbox_Data(CAN1,DLC_NMT,@NMT_Command_Specifier, @NMT_Node_Address,0,0,0,0,0,0)


  
;-------------------------------------------------------------------------------
; MAILBOX 6
;   Purpose:        controller (Master) sends EMCY message (faults) to the Display(slave)
;   Type:           Fault
;   Transmition:    Used to send fault messages from controller to the Display in case of emergency or failure
;
;   Data Length:    8 Bytes
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN6,1,0, ,C_EVENT,C_XMT,0,0)
  Setup_Mailbox_Data(CAN5,DLC_HEARTBEAT,@E7_NMT_State,0,0,0,0,0,0,0)

;-------------------------------------------------------------------------------
; MAILBOX 7
;   Purpose:        the Display(slave) recives an EMCY message (faults) from the controller (Master) 
;   Type:           Fault
;   Transmition:    Used to receive fault messages from  the controller in case of emergency or failure
;
;   Data Length:    8 Bytes
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN7,1,0, ,C_EVENT,C_RCV,0,0)
  Setup_Mailbox_Data(CAN7,DLC_HEARTBEAT,@E7_NMT_State,0,0,0,0,0,0,0)


;-------------------------------------------------------------------------------
; MAILBOX 8
;   Purpose:        the BMS(slave) recives an EMCY message (faults) from the controller (Master) 
;   Type:           Fault
;   Transmition:    Used to receive fault messages from  the controller in case of emergency or failure
;
;   Data Length:    8 Bytes
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN8,1,0, ,C_EVENT,C_RCV,0,0)
  Setup_Mailbox_Data(CAN8,DLC_HEARTBEAT,@E7_NMT_State,0,0,0,0,0,0,0)


  
;-------------------------------------------------------------------------------
; MAILBOX 11
;   Purpose:        the controller(master) recives a heartbeat message from the BMS (slave)
;   Type:           Heartbeat
;   Reception:      Used to send Heartbeat messages from BMS to the controller
;
;   Data Length:    1 Byte
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN11,0,0,HEARTBEAT_BASE + BMS_ID,C_EVENT,C_RCV,0,0)
  Setup_Mailbox_Data(CAN11,DLC_HEARTBEAT,@E7_NMT_State,0,0,0,0,0,0,0)

  
 
 
;-------------------------------------------------------------------------------
; MAILBOX 13
;   Purpose:        Controller (master) sends  message to BMS (slave) for ADD DATA HERE
;			
;   Type:           PDO_MISO
;   Transmission:   Should be sent cyclically by the controller to the
;						BMS at about a ADD SPEED HERE(40 ms) rate
;   Data Length:    8 Bytes? (CHNGE WHEN DATA HAS BEEN DETERMINED)
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN13,0,0,PDO1_RX_BASE + Par_E7_Node_ID,C_CYCLIC,C_XMT,0,0)
  Setup_Mailbox_Data(CAN13,DLC_PDO,	
						@BDI_Percentage,			 
						@BDI_Percentage+USEHB,	 
						@E7_Icons_Low_Word,		  
						@E7_Icons_Low_Word+USEHB,	 
						@E7_Icons_High_Word,	   
						@E7_Icons_High_Word+USEHB,
						@E7_MOSFET_Command,	  		
  						@E7_Alarm_Command)	    

;-------------------------------------------------------------------------------
; MAILBOX 14
;   Purpose:        Controller (master) sends message to display (slave) for ADD DATA HERE
;			
;   Type:           PDO_MISO
;   Transmission:   Should be sent cyclically by the controller to the
;						doisplay at about a ADD SPEED HERE(40 ms) rate
;   Data Length:    8 Bytes? (CHNGE WHEN DATA HAS BEEN DETERMINED)
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN14,0,0,PDO1_RX_BASE + Par_E7_Node_ID,C_CYCLIC,C_XMT,0,0)
  Setup_Mailbox_Data(CAN14,DLC_PDO,	
						@BDI_Percentage,			 
						@BDI_Percentage+USEHB,	 
						@E7_Icons_Low_Word,		  
						@E7_Icons_Low_Word+USEHB,	 
						@E7_Icons_High_Word,	   
						@E7_Icons_High_Word+USEHB,
						@E7_MOSFET_Command,	  		
  						@E7_Alarm_Command)


;-------------------------------------------------------------------------------
; MAILBOX 15
;   Purpose:        Controller (master) receives  messages from BMS (slave) for ADD DATA HERE
;			
;   Type:           PDO_MISO
;   Reception:       received cyclically
;   Data Length:    8 Bytes? (CHNGE WHEN DATA HAS BEEN DETERMINED)
;-------------------------------------------------------------------------------
  Setup_Mailbox(CAN15,0,0,PDO1_RX_BASE + Par_E7_Node_ID,C_CYCLIC,C_RCV,0,0)
  Setup_Mailbox_Data(CAN15,DLC_PDO,	
						@BDI_Percentage,			 
						@BDI_Percentage+USEHB,	 
						@E7_Icons_Low_Word,		  
						@E7_Icons_Low_Word+USEHB,	 
						@E7_Icons_High_Word,	   
						@E7_Icons_High_Word+USEHB,
						@E7_MOSFET_Command,	  		
  						@E7_Alarm_Command)



;-------------------------------------------------------------------------------
; MAILBOX 22
;   Purpose:        Master sends data to Display(SDO_MOSI)
;			
;   Type:           SDO_MOSI
;   Reception:       received cyclically
;   Data Length:    8 Bytes? (CHNGE WHEN DATA HAS BEEN DETERMINED)
;-------------------------------------------------------------------------------
Setup_Mailbox(CAN22,0,0,
