;Main Code

;======================================================
;OS Version 12.0 - Template for VCL Suggested Structure
;======================================================
;
;Copyright Â© 2011, all rights reserved
;Curtis Instruments
;200 Kisco Ave. 
;Mt. Kisco NY 10549
;914-666-2971
;
;
;
;Description
;-------------------
;This program is intended to serve as a structural template for any new VCL file.
;
;
;Revision History 
;-------------------
;
;	10/28/11 - B. Rounds	-	V1.01 Structural Template First Release.
;	12/12/15 - C. Gomez		-   V1 Basic Main Loop and copied CAN						         
;
;
;
;							
; compiled with WinVCL Ver 7.0.0
VCL_App_Ver = 101 	;Set VCL software revision (101 is Rev 1.01 in the 1311 Handheld Programmer)
;
;
;TO DO: 
;------------------- 
;
;
;
;I/O Requirements
;-------------------
;For functions to work properly, please make connections as indicated:
;
;

Drag_Switch				equals SW_4
Autocross_Switch		equals SW_5
Endurance_Switch		equals SW_6
Forward_Switch			equals SW_7
Reverse_Switch 			equals SW_8

;===============================================================
; Variable and Constant Declarations - These are generally placed
; at the beginning of the program to allow easier management of
; VCL user variables.
;===============================================================
;****************************************
; 					 CONSTANTS 
;****************************************
;
;------------------------------------------------------------------------------
; Message Types
; -These message types are defined in the CAN-Open  protocol and
;  appear in the upper-most 4 bits of the 11-BIT message identifier
;------------------------------------------------------------------------------
;NMT                constant        0x000       ; Network Management
SYNC_ERR_BASE       constant        0x080       ; Both Sync (COB-ID=0) & Error (COB-ID=Error)
TIME_STAMP          constant        0x100
PDO1_TX_BASE        constant        0x180       ; Process Data Object (Master In  Slave Out)
PDO1_RX_BASE        constant        0x200       ; Process Data Object (Master Out Slave In)
PDO2_TX_BASE        constant        0x280       ; Process Data Object (System Broadcast 1)
PDO2_RX_BASE        constant        0x300       ; Process Data Object (System Broadcast 2)
PDO3_TX_BASE        constant        0x380       ; Process Data Object (System Broadcast 3)
PDO3_RX_BASE        constant        0x400       ; Process Data Object (System Broadcast 4)
PDO4_TX_BASE        constant        0x480       ; Index Data Object   (Master In  Slave Out)
PDO4_RX_BASE        constant        0x500       ; Index Data Object   (Master Out Slave In)
SDO_MISO_BASE       constant        0x580       ; Service Data Object (Master In  Slave Out)
SDO_MOSI_BASE       constant        0x600       ; Service Data Object (Master Out Slave In)
HEARTBEAT_BASE      constant        0x700       ; Node Guard Message
;-------- NMT command specifier (CS)------------------------------------------------------------;highest pripority messages
NMT_CS_START_REMOTE_NODE        constant 0x01   ;used to tell CAN node to start
NMT_CS_STOP_REMOTE_NODE         constant 0x02   ;used to tell CAN node to stop, never used in code
NMT_CS_ENTER_PREOPERATIONAL     constant 0x80   ;operational state that does not receive PDOs
NMT_CS_RESET_NODE               constant 0x81   ;resets the node
NMT_CS_RESET_COMMUNICATION      constant 0x82   ;resets the entire CAN bus
ENGAGE_6_NODE					constant 0x6E	;identifier? for display
;
;
;
;------------- SDO COMMANDS --------------------------------------------------------------------
SDO_WRITE_COMMAND								constant 0x22	  ;NOT USED. Most likely to write to Service Data Objects
SDO_READ_COMMAND								constant 0x42	  ;NOT USED. Most likely to read Service Data Objects
;
; 			 			P_USER VARIABLES
;**************************************** ;Initialization of p_user variables, GO TO LINE 1038
Par_End_Mode_Max_Current		equals	P_User1				;max amps for endurance mode
Par_AutoX_Mode_Max_Current		equals	P_User2				;max amps for autocross mode
Par_Drag_Mode_Max_Current		equals	P_User3				;max amps for drag mode

;P_user# Variables can be programmable in the 1311-accessible parameter block ranging from p_user1 - p_user100
;*************************************************************************************************************

; 			 			USER_BIT VARIABLES
;****************************************
Program_Flags1								equals		User_Bit1
Startup_CAN_System_Has_Been_Called_Flag    	bit   Program_Flags1.1 ; Flag indicates is the CAN_Startup Subroutine has been called.

Switch_Screen_Flags							equals	User_Bit2
Goto_MSG_Screen_Flag						bit	 Switch_Screen_Flags.1 ;Indicates if a button press occured to change E6 Screen to show fault list
Goto_Gauge_Screen_Flag						bit	 Switch_Screen_Flags.2 ;Indicates if a button press occured to change E6 Screen to show gauge

; 			 			Delay VARIABLES
;****************************************
Startup_Delay								equals DLY1
Startup_Delay_Output						equals DLY1_Output

EnGage_State_Delay							equals DLY2
EnGage_State_Delay_Output			  		equals DLY2_Output
	
Engage_Display_Delay						equals DLY3
Engage_Display_Delay_Output					equals DLY3_Output

Engage_Fault_Display_Delay					equals DLY4
Engage_Fault_Display_Delay_Output			equals DLY4_Output

CAN_Timeout_Delay							equals	DLY5
CAN_Timeout_Delay_Output					equals	DLY5_Output

MaxCurrent_Delay							equals	DLY6
MaxCurrent_Delay_Output						equals	DLY6_Output

Change_Direction_Delay						equals DLY7
Change_Direction_Delay_Output 				equals DLY7_Output

Debounce_DLY								equals DLY8
Debounce_DLY_Output							equals DLY8_Output

E6_SDO_DLY									equals DLY9
E6_SDO_DLY_Output							equals DLY9_Output




;------------- CAN DEFINITIONS ----------
e6_SDO_MOSI_Mailbox							equals CAN1

e6_SDO_MISO_Mailbox							equals CAN11

STARTUP_Mailbox								equals CAN7
e6_PDO_MOSI_Mailbox							equals CAN12
e6_PDO_MISO_Mailbox							equals CAN13
;
;p_user_bit# Variables are 8-bit and range from p_user_bit1 - p_user_bit10
;
;user# Variables are pre-allocated general purpose variables ranging from user1 - user120
;****************************************************************************************
;
; 			 			USER VARIABLES
;****************************************


;data defintions
Program_Flags2			equals	can_response_error
EnGage_PDO_Timeout  bit  CAN12_Timeout

;User42-46 not used

E6_Battery_Current 		  				equals  User36		 				  
E6_Vehicle_Speed						equals	User40	 
E6_Icon_Status							equals	User41
	Failure_Warning_Icon					bit	E6_Icon_Status.1              
	Park_brake_Icon							bit	E6_Icon_Status.2
	Rabbit_Icon								bit	E6_Icon_Status.4
	;Turtle_Icon							bit	E6_Icon_Status.8
	Service_Wrench_Icon						bit	E6_Icon_Status.8
	Lock_Icon								bit	E6_Icon_Status.32
	Left_Turn_Signal_Icon					bit	E6_Icon_Status.64
	Right_Turn_Signal_Icon					bit	E6_Icon_Status.128
	Failure_Warning_Fault_Mask				bit	E6_Icon_Status.256
	Park_brake_Fault_Mask					bit	E6_Icon_Status.512
	Rabbit_Fault_Mask						bit	E6_Icon_Status.1024
	Turtle_Fault_Mask						bit	E6_Icon_Status.2048
	Service_Wrench_Fault_Mask				bit	E6_Icon_Status.4096
	Lock_Fault_Mask							bit	E6_Icon_Status.8192
	Left_Turn_Signal_Fault_Mask				bit	E6_Icon_Status.16384
	Righ_Turn_Signal_Fault_Mask				bit	E6_Icon_Status.32768                  
E6_Drive_Gear_Select					equals	User42
E6_Pushbutton_Status					equals	User43
	;unused										bit	E6_Pushbutton_Status.1
	;unused										bit	E6_Pushbutton_Status.2
	Left_Button									bit	E6_Pushbutton_Status.4
	Up_Button									bit	E6_Pushbutton_Status.8
	Enter_Button								bit	E6_Pushbutton_Status.16
	Down_Button									bit	E6_Pushbutton_Status.32
	Right_Button								bit	E6_Pushbutton_Status.64	  		


Display_State						 equals	User47
Fault_Code 							 equals	User48
Display_Set_To_Message 	 			 equals User49
e6_Text_Code  					 	 equals User50

Index  								 equals	User51
Fault_Code_Engage					 equals	User52
Traction_Fault_Count				 equals	User53

Engage_State	    				 equals	 User54		;state machine for sending messages to engage display 
NMT_Command_Specifier				 equals  User55
NMT_Node_Address					 equals  User56

Mode 								 equals  User57
LastMode							 equals  User58

;user_bit# Variables are 8-bit and range from user_bit1 - user_bit10
;
;Fault flags can cause a VCL User Fault Action and can display on the 1311 Handheld Programmer
;*********************************************************************************************
;
;-------------------Fault Action Definitions------------------------
			Shutdown_Motor              constant    0x0001
			Shutdown_Main               constant    0x0002
			Shutdown_EMBrake            constant    0x0004
			Shutdown_Throttle           constant    0x0008
			Shutdown_Interlock          constant    0x0010
			Shutdown_Driver1            constant    0x0020
			Shutdown_Driver2            constant    0x0040
			Shutdown_Driver3            constant    0x0080
			Shutdown_Driver4            constant    0x0100
			Shutdown_PD                 constant    0x0200
			Full_Brake                  constant    0x0400
;

;------------ USER FAULT DEFINITION --------

EnGage6_Comm_Fault				bit	Userfault1.1	 ;Fault #1 51  Indicates a fault if PDOs from EnGage stop
;													bit	UserFault1.4	 ;Fault #3 53  
;													bit UserFault1.8	 ;Fault #4 54
;													bit UserFault1.16	 ;Fault #5 55
;													bit UserFault1.32	 ;Fault #6 56
;													bit UserFault1.64	 ;Fault #7 57
;													bit UserFault1.128 ;Fault #8 58

;													bit UserFault2.1	 ;Fault #9 59
;													bit UserFault2.2	 ;Fault #10 61
;               					bit UserFault2.4	 ;Fault #11 62
;													bit UserFault2.8	 ;Fault #12 63
;													bit UserFault2.16	 ;Fault #13 64
;													bit UserFault2.32	 ;Fault #14 65
;													bit UserFault2.64	 ;Fault #15 66
;													bit UserFault2.128 ;Fault #16 67
																						
;--------- USER FAULT ACTIONS -----------
User_Fault_Action_01 = Shutdown_Throttle		;?????? pg 101 of AC manual
User_Fault_Action_02 = Shutdown_Throttle;   Shutdown_Main + Shutdown_Motor + Shutdown_Interlock + Shutdown_Throttle + Full_Brake 
User_Fault_Action_03 = 0; Coded in VCL 	, shuts down motor	

;======================================================
;One Time Initialization
; RAM variables should be initialized to a known value before starting
; execution of VCL logic.  All other tasks that need to be performed at
; startup but not during main loop execution should be placed here.
; Signal chains should be set up here as well.
;======================================================
;
;

Engage_State = 0

Mode = 3

Setup_Delay(Startup_Delay,3000)		; Wait for 3000 msec to allow time for switches to debounce and CAN slaves to come online
Setup_Delay(Engage_Fault_Display_Delay,3000) ;setup delay for the writing and reading to the enGage 7. 



;========================================================================
;                       Main Program Loop
; The continuously running portion of the program should be placed here
; It is important to structure the main loop such that there is no
; possibility for the program to get stuck in a loop that will prevent
; important vehicle functions from occuring regularly.  Be particularly
; careful with while loops.  Use of signal chains and automated functions
; as described in the VCL documentation can greatly reduce the complexity
; of the main loop.
;========================================================================
;
;
Mainloop:

;---------------------------------------------------------------------------------------------------------
;   Startup_CAN System is called 3 seconds after power up.
;   However the vehicle is allowed to respond prior to this as the CAN slaves is the Engage 7.
;   The vehilce is allowed to operate normally even if these slaves are not operational.
;---------------------------------------------------------------------------------------------------------
If ( (Startup_Delay_Output = 0) & (Startup_CAN_System_Has_Been_Called_Flag = Off) )
	{    ;	Waiting for enGage to come ON (Splash Screen adds 2 sec to start of CAN)
		Call Startup_CAN_System		;setup and start the CAN communications system
		Startup_CAN_System_Has_Been_Called_Flag = On
	}

	Call E6_Get_Data

while(1=1){
	if (Drag_Switch)
		{
			Mode = 1;
		}
	else if (Endurance_Switch)
		{
			Mode = 2;
		}
	else if (Autocross_Switch)
		{
			Mode = 3;
		}
	else
		{
			Mode = LastMode;
		}


	if (Mode = 1)
		{
			LastMode = 1;

			;drag light = ON;
			Set_Digout(DigOut6);

			;otherlights = OFF;
			;Turn off autocross light;
			Clear_Digout(DigOut7);

			;Turn off endurance light;
			Put_PWM(PWM6,0);

			;MAX Amps = 400A which is 80% of 32767
			Drive_Current_Limit = 26213

			;if (timer >= 8s){
			;	change mode to to Autocross
			;}
			Setup_Delay(MaxCurrent_DLY,7800)
			Mode = 3;
		}
	else if (Mode = 2)
		{
			LastMode = 2;

			;endurance light = ON;
			Put_PWM(PWM6,32767);

			;other lights = OFF;
			;Turn off autocross light;
			Clear_Digout(DigOut7);

			;Turn off drag light;
			Clear_Digout(DigOut6);

			;MAX AMPS = 100A which is 20% of 32767
			Drive_Current_Limit = 6553
		}
	else
		{
			LastMode = 3;
			
			;light3 = ON;
			Set_Digout(DigOut7);

			;other lights = OFF;
			;Turn off drag light;
			Clear_Digout(DigOut6);

			;Turn off endurance light;
			Put_PWM(PWM6,0);

			;MAX AMPS = 250A which is 50% of 32767
			Drive_Current_Limit = 16383
		}
}



	if ((Engage_Display_Delay_Output = 0)	& (Startup_CAN_System_Has_Been_Called_Flag = On) )	;if engage message timer expired
		{
		 Call Process_Engage
		}
;;;	
;	
		;Call Check_PDO_Status

    goto Mainloop 



;========================================================================
;Subroutines
;========================================================================
;
;
;*******************************************************************************************************
;If the controller is in a fault mode, the Message Center text displays the fault code.
;When multiple faults are active, the fault codes will be cycled through, each displaying for 2 sec. 
;When the controller is not in fault mode Message Center displays nothing (and other gages display)
;*******************************************************************************************************
Process_Engage:
															
		If ((Service_Wrench_Icon = On)&(Left_Button = On));check if the operator wants to see the faults
			{		
			  Goto_MSG_Screen_Flag = On	
			  Goto_Gauge_Screen_Flag = Off
			  Setup_Delay(Debounce_DLY,750) 
			}	
		else if(((Service_Wrench_Icon = Off)&(Right_Button = On))|((Debounce_DLY_Output = 0)&(Right_Button = On))) ;check if the operator wants to see the gauges
			{		
			  Goto_Gauge_Screen_Flag = On	
			  Goto_MSG_Screen_Flag = Off	
			}			
;			else
;				{
;					Goto_Gauge_Screen_Flag = Off	
;			  	Goto_MSG_Screen_Flag = Off	
;			  }
		
		If (EnGage_State=0)				;Check for screen selection changes
			{
				User110 = 0x22	  		;Write 
				User111 = 0x00				;Object ID = 0x3224 Subindex =0x00
				User112 = 0x32
				User113 = 0x00	
				If (Goto_Gauge_Screen_Flag = On) {User114 = 0x05}
				If (Goto_MSG_Screen_Flag = On) {User114 = 0x06}
				User115 = 0x00 
				User116 = 0x00
				User117 = 0x00
				
				If (Switch_Screen_Flags <>0)
				{
					Send_Mailbox(e6_SDO_MOSI_Mailbox)								
					Switch_Screen_Flags = 0
					Setup_Delay(Engage_State_Delay, 100)
					EnGage_State = 1
				}	
				else
				{
					EnGage_State = 1 ;no delay needed because no SDO was sent
				} 	
			}
			else if( EnGage_State = 1)		;Determine if there is a fault present
			{
				if(Fault_Count <> 0)
					{
						if(Engage_Fault_Display_Delay_Output = 0)
	 						{													;Timer so that multiple faults will display each flash code for 2 secs on the engage Message Center
	 							Call Determine_Fault		;Note if Fault Exists, the response of RPM and AMP gages will also be delayed by 2+ secs before update cycle.
							}                         ;Determine if there is a fault to be displayed in the Message Center
			      														;Determine_Fault sets Engage_Fault_Display_Delay to 2 sec so that code bypasses this step.
							Service_Wrench_Icon = ON
							EnGage_State = 2
					}
					else
					{
						Service_Wrench_Icon = OFF
						EnGage_State = 0
					}
					Setup_Delay(Engage_State_Delay, 100)
			}
			else if(EnGage_State = 2)
				{
					If(Traction_Fault_Count <> 0)
					{
						User110 = 0x22	 		;Write of e6 Error Message
						User111 = 0x03
						User112 = 0x34      ;Object ID = 0x3403  for Text lines of Message Center
						User113 = 0x05      ;Sub Index = 0x05  5th line of 10 line display (right above middle of display)
						User114 = e6_Text_Code  ; Error Code for E6
						User115 = 0x00
						User116 = 0x00
						User117 = 0x00
						Send_Mailbox(e6_SDO_MOSI_Mailbox)		;Message Center SDOs must be sent using different Node ID
						Engage_State = 1
						Setup_Delay(Engage_State_Delay,200)	;reset engage message timer
					}
					else
					{	
						EnGage_State = 0
					}	
		
		
				}
  Return
	
	
E6_Get_Data:
	
	If(Engage_Display_Delay_Output = 0)
		{
			If (Regen_Flag = On)
			{
				E6_Regen_Percentage	=  Get_Muldiv(MTD1,Current_RMS,100,IrmsPowerLimit)
			}
			Else
			{
				E6_Regen_Percentage = 0
			}
			
			E6_Battery_Current = Current_RMS
			;E6_Battery_Current = Battery_Current
			E6_Keyswitch_Voltage = (KeySwitch_Voltage/100)
			E6_Vehicle_Speed = (ABS_Vehicle_Speed/10)
			; E6_Vehicle_Speed = Vehicle_Speed/10 ; need to add equation to convert motor rpm to mph
		
			Setup_Delay(Engage_Display_Delay,100)
		}
			
	Return


	;*******************************************************************************************************
;Subroutines
;*******************************************************************************************************
Check_PDO_Status:
;This routine checks for missing PDO MISO's from the joystick. If three PDO's are missing 
;then a PDO Timeout fault is issued. Since this vehicle uses dual drive any missing PDO's 
;from the slave traction controller will be detected at an OS level and will not need
;VCl management. Note that missing PDO's from the eXm is handled in the Pump Controller's VCL.
;*******************************************************************************************************
 
	if (EnGage_PDO_Timeout = ON)						;Check to see if PDO_MISO was received from the enGage to mailbox 12
		{
		EnGage6_Comm_Fault = ON 	
		}
		else
			{
				EnGage6_Comm_Fault = OFF ;Clear previous PDO Timeout fault
			}
Return
	
	;*****************************************************************************************
Determine_Fault:
	
	Traction_Fault_Count = Fault_Count 	 ;this prevents the fault count form changing as faults are set or cleared
	Setup_Delay(Engage_Fault_Display_Delay,2000)			;Set timer so that fault text will remain for 2 secs, before next fault is displayed

	If(Traction_Fault_Count <> 0)
		{
			if(Index >= Traction_Fault_Count)	;check the end of the stack of fault codes was not reached
	   	{
				Index 	= 0		;end of stack reached so reset Index to beginning and retreive fault codes
			}
			Call Find_Fault_Code
			Index = Index+1
		}
		
	Return
	
;--------------------------------------------------------------------------
;Subroutine Find_Fault_Code - uses a Get_Fault_Code function to pop an active fault
;	code off the stack and then uses this info to translate into a Fault_Flash_Code,
;	which is returned for display on the spyglass (840).			
;				
;--------------------------------------------------------------------------
Find_Fault_Code:
	
	Fault_Code = Get_Fault_Code(Index)	;The resultant Fault_Code is NOT the flash code

	if(Fault_Code=0)
		{
		;Fault_Flash_Code=38	Main Contactor Welded
		e6_Text_Code=25
		}
	else if(Fault_Code=1)
		{
		;Fault_Flash_Code=39 Main Contactor Did Not Close
		e6_Text_Code=26
		}
	else if(Fault_Code=2)
		{
  	;Fault_Flash_Code=45 Pot Low Over Current
		e6_Text_Code=31
		}
	else if(Fault_Code=3)
		{
		;Fault_Flash_Code=42 Throttle Wiper Low
		e6_Text_Code=28
		}
	else if(Fault_Code=4)
		{
		;Fault_Flash_Code=41 Throttle Wiper High
		e6_Text_Code=27
		}
	else if(Fault_Code=5)
		{
		;Fault_Flash_Code=44 Pot 2 Wiiper Low
		e6_Text_Code=30
		}
	else if(Fault_Code=6)
		{
		;Fault_Flash_Code=43 Pot 2 Wiper Hi
		e6_Text_Code=29
		}
	else if(Fault_Code=7)
		{
		;Fault_Flash_Code=46 EEPROM Failure
		e6_Text_Code=32
		}
	else if(Fault_Code=8)
		{
		;Fault_Flash_Code=47 HPD/Sequencing
		e6_Text_Code=33
		}
	else if(Fault_Code=9)
		{
		;Fault_Flash_Code=17 Severe Undervoltage
		e6_Text_Code=6
		}
	else if(Fault_Code=10)
		{
		;Fault_Flash_Code=18 Severe Overvoltage
		e6_Text_Code=7
		}
	else if(Fault_Code=11)
		{
		;Fault_Flash_Code=23 Undervoltage Cutback
		e6_Text_Code=9
		}
	else if(Fault_Code=12)
		{
		;Fault_Flash_Code=24 Overvoltage Cutback
		e6_Text_Code=10
		}
	else if(Fault_Code=13) 
		{
		;Fault_Flash_Code=21 Not Used
		
		}
	else if(Fault_Code=14)
		{
		;Fault_Flash_Code=22 Controller Overtemp Cutback
    e6_Text_Code=8
		}
	else if(Fault_Code=15)
		{
		;Fault_Flash_Code=15 Controller Severe Undertemp
		e6_Text_Code=4
		}
	else if(Fault_Code=16)
		{
		;Fault_Flash_Code=16 Controller Severe Overtemp
		e6_Text_Code=5
		}
	else if(Fault_Code=17)
		{
		;Fault_Flash_Code=31 Coil 1 Driver Open/Short
		e6_Text_Code=16
		}
	else if(Fault_Code=18)
		{
		;Fault_Flash_Code=32 Coil 2 Driver Open/Short
		e6_Text_Code=18
		}
	else if(Fault_Code=19)
		{
		;Fault_Flash_Code=33 Coil 3 Driver Open/Short
		e6_Text_Code=20
		}
	else if(Fault_Code=20)
		{
		;Fault_Flash_Code=34 Coil 4 Driver Open/Short
		e6_Text_Code=21
		}
	else if(Fault_Code=21)
		{
		;Fault_Flash_Code=35 PD Open/Short
		e6_Text_Code=22
		}
	else if(Fault_Code=22)
		{
		;Fault_Flash_Code=31 Main Open/Short
		e6_Text_Code=17
		}
	else if(Fault_Code=23)
		{
		;Fault_Flash_Code=32 EM Brake Open /Short
		e6_Text_Code=19
		}
	else if(Fault_Code=24)
		{
		;Fault_Flash_Code=14 Precharge Fault
		e6_Text_Code=3
		}
	else if(Fault_Code=25)
		{
		;Fault_Flash_Code=26 Digital Out 6 Overcurrent
		e6_Text_Code=12
		}
	else if(Fault_Code=26)
		{
		;Fault_Flash_Code=27 Digital Out 7 Overcurrent
		e6_Text_Code=13
		}
	else if(Fault_Code=27)
		{
		;Fault_Flash_Code=12 Controller Overcurrent
		e6_Text_Code=1
		}
	else if(Fault_Code=28)
		{
		;Fault_Flash_Code=13 Current Sensor Fault
		e6_Text_Code=2
		}
	else if(Fault_Code=29)
		{
		;Fault_Flash_Code=28 Motor Temp Hot Cutback
		e6_Text_Code=14
		}
	else if(Fault_Code=30)
		{
		;Fault_Flash_Code=49 Parameter Change Fault
		e6_Text_Code=36
		}
	else if(Fault_Code=31)
		{
		;Fault_Flash_Code=37 Motor Open
		e6_Text_Code=24
		}
	else if(Fault_Code=32)
		{
		;Fault_Flash_Code=51 VCL FAULT 1
;		e6_Text_Code=61    ; "SOC" will display on e7 to indicate SOC -Acutity Communication Fault
		e6_Text_Code=222    ; "enGage VII PDO Timeout" will display on e7 to indicate PDO Fault
		}
	else if(Fault_Code=33)
		{
		;Fault_Flash_Code=52 VCL FAULT 2  this is a custom HPD Fault that trips if throttle is active at within 100ms of power up.
		e6_Text_Code=70    ; "Low pressure Switch" will display on e6.
		}
	else if(Fault_Code=34)
		{
		;Fault_Flash_Code=53 VCL FAULT 3
		;e6_Text_Code=73   ; "Motor RPM"  will display on e7 to indicate Motor has been spun too fast.  
		}
	else if(Fault_Code=35)
		{
		;Fault_Flash_Code=54 VCL FAULT 4 
		}
	else if(Fault_Code=36)
		{
		;Fault_Flash_Code=55 VCL FAULT 5
		}
	else if(Fault_Code=37)
		{
		;Fault_Flash_Code=56 VCL FAULT 6
		}
	else if(Fault_Code=38)
		{
		;Fault_Flash_Code=57 VCL FAULT 7
		}
	else if(Fault_Code=39)
		{
		;Fault_Flash_Code=58 VCL FAULT 8
		}
	else if(Fault_Code=40)
		{
		;Fault_Flash_Code=59 VCL FAULT 9
		}
	else if(Fault_Code=41)
		{
		;Fault_Flash_Code=61 VCL FAULT 10
		}
	else if(Fault_Code=42)
		{
		;Fault_Flash_Code=62 VCL FAULT 11
		}
	else if(Fault_Code=43)
		{
		;Fault_Flash_Code=63 VCL FAULT 12
		}
	else if(Fault_Code=44)
		{
		;Fault_Flash_Code=64 VCL FAULT 13
		}
	else if(Fault_Code=45)
		{
		;Fault_Flash_Code=65 VCL FAULT 14
		}
	else if(Fault_Code=46)
		{
		;Fault_Flash_Code=66 VCL FAULT 15
		}
	else if(Fault_Code=47)
		{
		;Fault_Flash_Code=67 VCL FAULT 16
		}
	else if(Fault_Code=48)
		{
		;Fault_Flash_Code=69 External Supply Out Of Range
		e6_Text_Code=38
		}
	else if(Fault_Code=49)
		{
		;Fault_Flash_Code=29 Motor Temp Sensor Fault
		e6_Text_Code=15
		}
	else if(Fault_Code=50)
		{
		;Fault_Flash_Code=68 VCL Run Time Error
		e6_Text_Code=37
		}
	else if(Fault_Code=51)
		{
		;Fault_Flash_Code=25 +5V Supply 
		e6_Text_Code=11
		}
	else if(Fault_Code=52)
		{
		;Fault_Flash_Code=71 OS General
		e6_Text_Code=39
		}
	else if(Fault_Code=53)
		{
		;Fault_Flash_Code=72 PDO Timeout
		e6_Text_Code=40
		}
	else if(Fault_Code=54)
		{
		;Fault_Flash_Code=36 Encoder Fault
		e6_Text_Code=23
		}
	else if(Fault_Code=55)
		{
		;Fault_Flash_Code=73 Stall Detected
		e6_Text_Code=41
		}
	else if(Fault_Code=58)
		{
		;Fault_Flash_Code=47 Emergency Rev HPD
		e6_Text_Code=34
		}
	else if(Fault_Code=60)
		{
		;Fault_Flash_Code=89 Motor Type Fault
		e6_Text_Code=45
		}
	else if(Fault_Code=62)
		{ 
		;Fault_Flash_Code=87 Motor Characterization Fault
		e6_Text_Code=44
		}
;	else if(Fault_Code=63)
;		{
;		;ENC CHAR 
;		Fault_Flash_Code=83
;		}
	else if(Fault_Code=66)
		{
		;Fault_Flash_Code=92 EM Brake Failed to Set
		e6_Text_Code=47
		}
	else if(Fault_Code=67)
		{
		;Fault_Flash_Code=93 Encoder Limited Operating Strategy
		e6_Text_Code=48
		}
	else if(Fault_Code=68)
		{
		;Fault_Flash_Code= 94 Emer Rev Timeout
		e6_Text_Code=49
		}
	else if(Fault_Code=69)
		{
		;Fault_Flash_Code=75 Dual Severe Fault
		e6_Text_Code=43
		}	
	else if(Fault_Code=70)
		{
		;Fault_Flash_Code=74 Fault on Other Traction Controller
		e6_Text_Code=42
		}	
	else if(Fault_Code=71)
		{
		;Fault_Flash_Code=98 Illegal Model Number
		e6_Text_Code=53
		}
	else if(Fault_Code=72)
		{
		;Fault_Flash_Code=95 Pump Overcurrent
		e6_Text_Code=50
		}
	else if(Fault_Code=73)
		{
		;Fault_Flash_Code=96 Pump BDI
		e6_Text_Code=51
		}
	else if(Fault_Code=74)
		{
		;Fault_Flash_Code=47 Pump HPD
		e6_Text_Code=35
		}
	else if(Fault_Code=75)
		{
		;Fault_Flash_Code=99 Dualmotor Parameter Mismatch
		e6_Text_Code=54
		}
	return	


;===============================================================
;									STARTUP CAN SYSTEM
;===============================================================


;Mailbox 1 - SDO Write to enGage 7
;Mailbox 2 - SDO READ from enGage 7
;Mailbox 3 - Dual Drive PDO_MOSI (OS Reserved if using dual drive)
;Mailbox 4 - Dual Drive PDO_MISO (OS Reserved if using dual drive)
;Mailbox 5 - Dual Drive EMCY Receive (OS Reserved if using dual drive)
;Mailbox 6 - Dual Drive EMCY transmit (OS Reserved if using dual drive)
;Mailbox 7 - CANopen Slave NMT receive (OS Reserved)  -- used to send NMt message in this application
;Mailbox 8 - CANopen Slave Heartbeat transmit (OS Reserved)
;Mailbox 9 - CANopen SDO MISO (OS Reserved)
;Mailbox 10 - CANopen SDO MOSI (OS Reserved)
;Mailbox 11 - CANopen PDO1_MOSI transmit (OS Reserved)   -- 
;Mailbox 12 - CANopen PDO1_MISO receive  (OS Reserved)  
;Mailbox 13 - CANopen PDO2_MISO transmit (OS Reserved)
;Mailbox 14 - CANopen PDO2_MISO receive  (OS Reserved)

; This routine initializes and starts the CAN System. It has to be
; called in the One Time setup (before the main loop).This setup 
; is supossed to work only if slave devices doesn't require NMT.
startup_CAN_System:
  Suppress_CANopen_Init = 0	;first undo suppress, then startup CAN, then disable CANopen
;  Disable_CANOpen_Emergency()  ;releases CAN6 to VCL control --- CAN6 is needed for Dual Drive Emergency Messages
;  Disable_CANOpen_Heartbeat()	;releases CAN8 to VCL control
 Disable_CANOpen_NMT()				;releases CAN7 to VCL control        ---
 Disable_CANOpen_PDO()				;releases CAN11-CAN14 to VCL control -- Used for PDO reception from the Acuity slave.
;   Disable_CANOpen_SDO()			;releases CAN9 and CAN10 to VCL control
;   Disable_CANOpen()				  ;releases all CAN mailboxes

  ; Setup_CAN(CAN_500KBAUD,0,0,0,0)	; Baudrate = OS Baud Rate, no Sync, Not Used, Not Used, Auto Restart\
  ;
	;############################# MAILBOX SETUP #################################
	;================== MESSAGES SETUP ====================      
	;--------------------------------------------
 	; Purpose        Send NMT Message to 
	; Type           NMT
  ; Reception      Only sent once
  ; Data Length    2 Byte						
	Setup_Mailbox(STARTUP_Mailbox,0,0,0x00,C_EVENT,C_XMT,0,0)
	Setup_Mailbox_Data(STARTUP_Mailbox,2,
                        @NMT_Command_Specifier,
                        @NMT_Node_Address,
                        0,0,0,0,0,0)
 
   
  ; Purpose:        Send information to the Engage display for the Message center.
  ; Type:           SDO MOSI
  ; Data Length:    8 Byte
  Setup_Mailbox(e6_SDO_MOSI_Mailbox,0,0,SDO_MOSI_BASE+ENGAGE_6_NODE,C_EVENT,C_XMT,0,0)
  Setup_Mailbox_Data(e6_SDO_MOSI_Mailbox,8,
						@User110,	  
  					@User111,			 
            @User112,			 
						@User113,	 
						@User114,		  
            @User115,	 
            @User116,	   
            @User117)
            
  		
                    
 
  ; Purpose:        Get information from the Engage display for the Message center.
  ; Type:           SDO MISO
  ; Data Length:    8 Byte
  Setup_Mailbox(e6_SDO_MISO_Mailbox,0,0,SDO_MISO_BASE+ENGAGE_6_NODE,C_EVENT,C_RCV,0,0)
  Setup_Mailbox_Data(e6_SDO_MISO_Mailbox,8,
						@User36,	  
  					@User36+USEHB,			 
            @User37,			 
						@User37+USEHB,	 
						@User38,		  
            @User38+USEHB,	 
            @User39,	   
            @User39+USEHB)	
            
             ; Purpose:        Send information to the Engage display for the Message center.
  ; Type:           PDO MOSI
  ; Data Length:    8 Byte
  Setup_Mailbox(e6_PDO_MOSI_Mailbox,0,0,PDO1_RX_BASE+ENGAGE_6_NODE,C_CYCLIC,C_XMT,50,e6_PDO_MISO_Mailbox)
  Setup_Mailbox_Data(e6_PDO_MOSI_Mailbox,8,
						@E6_Battery_Current,	  
  					@E6_Battery_Current+USEHB,			 
            0,					 
						@E6_Keyswitch_Voltage,	 
						@E6_Regen_Percentage,		  
            @E6_Vehicle_Speed,	 
            @E6_Icon_Status,	   
            @E6_Drive_Gear_Select)

  ; Purpose:        Receive information from the Engage display 
  ; Type:           PDO MISO
  ; Data Length:    8 Byte
  Setup_Mailbox(e6_PDO_MISO_Mailbox,0,0,PDO1_TX_BASE+ENGAGE_6_NODE,C_EVENT,C_RCV,0,0)
  Setup_Mailbox_Data(e6_PDO_MISO_Mailbox,8,
						@User50,	  		
  					@User50+USEHB,
  					@User51,
  					@User51+USEHB,
  					@User52,
  					@User52+USEHB,
  					@User53,
  					@E6_Pushbutton_Status)
										
						
            
  
                                  
            
                      

  ;######################### CAN NODE START #####################################
 	Startup_CAN()                        
	
	;==================== START UP CAN ============================
	Startup_CAN_Cyclic()			; Do it now so there is no chance of the NODE 1 timing out.
	CAN_Set_Cyclic_Rate(5) 		;this sets the cyclic cycle to every 40 ms
	NMT_Command_Specifier =  NMT_CS_START_REMOTE_NODE		;CS=1 means go operational
	NMT_Node_Address = ENGAGE_6_NODE	
	Send_Mailbox(STARTUP_Mailbox)
	return	


;========================================================================
;           1311/1314 Parameter, Monitor, and Fault Declarations
; These are generally placed at the end of the program, because they can
; be large, and hinder the general readability of the code when placed
; elsewhere.  Please note that Aliases and other declared variables
; cannot be used as addresses in parameter declarations, Only native
; OS variable names may be used.
;========================================================================
;
;***********************
;*    PROGRAM MENU     *
;***********************
;
;
;
;***********************
;*    MONITOR MENU     *
;***********************
;
;
;
;***********************
;*    FAULTS MENU      *
;***********************

